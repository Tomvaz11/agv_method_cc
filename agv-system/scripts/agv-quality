#!/usr/bin/env python3
"""
AGV Quality Validator v1.0
Script de validação de qualidade para arquivos criados/editados durante implementação AGV.
"""

import sys
import os
from pathlib import Path

# Adicionar o diretório src ao Python path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

def main():
    """Valida qualidade de arquivo específico"""
    # Configurar encoding para Windows
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    if hasattr(sys.stdout, 'reconfigure'):
        sys.stdout.reconfigure(encoding='utf-8')
    if hasattr(sys.stderr, 'reconfigure'):
        sys.stderr.reconfigure(encoding='utf-8')
        
    if len(sys.argv) < 2:
        print("ERRO: Caminho do arquivo não fornecido")
        return False
        
    file_path = sys.argv[1]
    
    if not os.path.exists(file_path):
        print(f"ERRO: Arquivo não encontrado: {file_path}")
        return False
    
    print(f"[OK] AGV Quality Check: {file_path}")
    
    # Validações básicas de qualidade
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Verificações básicas
        checks_passed = 0
        total_checks = 3
        
        # 1. Verificar se não está vazio
        if len(content.strip()) > 0:
            print("  [OK] Arquivo não está vazio")
            checks_passed += 1
        else:
            print("  [ERRO] Arquivo está vazio")
            
        # 2. Verificar encoding UTF-8 válido
        if content:
            print("  [OK] Encoding UTF-8 válido")
            checks_passed += 1
        else:
            print("  [ERRO] Problemas de encoding")
            
        # 3. Verificações específicas por tipo de arquivo
        if file_path.endswith('.py'):
            # Verificar se há docstring ou comentário inicial
            lines = content.split('\n')
            has_docstring = False
            
            for line in lines[:10]:  # Primeiras 10 linhas
                if '"""' in line or "'''" in line or line.strip().startswith('#'):
                    has_docstring = True
                    break
                    
            if has_docstring:
                print("  [OK] Documentação inicial presente")
                checks_passed += 1
            else:
                print("  [AVISO] Recomendado: Adicionar docstring ou comentário inicial")
                checks_passed += 0.5  # Meio ponto pois é recomendação
                
        elif file_path.endswith(('.ts', '.tsx')):
            # Verificações básicas para TypeScript
            if 'export' in content or 'import' in content:
                print("  [OK] Estrutura de módulo TypeScript válida")
                checks_passed += 1
            else:
                print("  [AVISO] Verificar estrutura de módulo TypeScript")
        else:
            checks_passed += 1  # Outros tipos de arquivo passam por padrão
            
        # Score final
        score = (checks_passed / total_checks) * 100
        print(f"  [SCORE] Score de Qualidade: {score:.1f}%")
        
        if score >= 80:
            print("  [APROVADO] Qualidade APROVADA")
            return True
        else:
            print("  [AVISO] Qualidade necessita melhorias")
            return True  # Não bloqueia, apenas avisa
            
    except Exception as e:
        print(f"  [ERRO] Erro na validação: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)